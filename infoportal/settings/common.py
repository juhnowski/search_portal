"""
Django settings for infoportal project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '((iij=&&vio!kd*#(b-#@)4+i(pix10aal&a1_w=zb!@!5(gfm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["192.168.43.109"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',

    # 'haystack',

    # third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_yasg',
    'mptt',

    # custom apps
    'users.apps.UsersConfig',
    'documents.apps.DocumentsConfig',
    'notes.apps.NotesConfig',
    'folders.apps.FoldersConfig',
    'search.apps.SearchConfig',
    'comparison.apps.ComparisonConfig',
    'integration.apps.IntegrationConfig',
    'analytics.apps.AnalyticsConfig',

    # search engines
    # 'search.engines.solr.apps.MySolrConfig',
    # 'search.engines.simple.apps.SimpleConfig',
    # 'search.engines.sphinx.apps.SphinxConfig'

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'infoportal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'infoportal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'infoportal',
        'USER': 'infoportal',
        'PASSWORD': 'infoportal',
        'HOST': 'localhost',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


AUTH_USER_MODEL = 'users.CustomUser'


######################
### REST FRAMEWORK ###
######################

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'users.utils.authentication.ExpiringTokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 50
}

TOKEN_EXPIRED_AFTER_SECONDS = 60 * 60

### Настройки Celery ###
BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow'

### CORS settings ###
CORS_ORIGIN_ALLOW_ALL = True

### Интеграция ###

# Настройки импорта из Нормдока.
NORMDOC_HOST = os.getenv('NORMDOC_HOST', 'localhost')
NORMDOC_PORT = os.getenv('NORMDOC_PORT', 18180)
NORMDOC_USER = os.getenv('NORMDOC_USER', 'superalf')
NORMDOC_PASSWORD = os.getenv('NORMDOC_PASSWORD', 'admin')

# Настройки импорта из БД с XML.
XML_DB_HOST = os.getenv('XML_DB_HOST', 'localhost')
XML_DB_DBNAME = os.getenv('XML_DB_DBNAME', 'xml')
XML_DB_USER = os.getenv('XML_DB_USER', 'gost')
XML_DB_PASSWORD = os.getenv('XML_DB_PASSWORD', 'password')

# Настройки импорта из Бересты.
BERESTA_HOST = os.getenv('BERESTA_HOST', 'master-rsprs.lab50')
BERESTA_PORT = os.getenv('BERESTA_PORT', 8080)
BERESTA_USER = os.getenv('BERESTA_USER', 'admin')
BERESTA_PASSWORD = os.getenv('BERESTA_PASSWORD', 'password')

# Настройки импорта изображений по SSH.
# Предполагается, что ключи уже проброшены.
IMAGES_HOST = os.getenv('IMAGES_HOST')
IMAGES_PORT = os.getenv('IMAGES_PORT')
IMAGES_REMOTE_PATH = os.getenv('IMAGES_REMOTE_PATH')

### SWAGGER ###
SWAGGER_SETTINGS = {
    "exclude_namespaces": ['rest_logout', ],
    'LOGIN_URL': '/admin/login/',
    'LOGOUT_URL': '/admin/logout/',
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic',
        }
    },
    'USE_SESSION_AUTH': True,
    'JSON_EDITOR': True,
    'REFETCH_SCHEMA_ON_LOGOUT': True
}

### LOGGING ###

LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'info').upper()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s: %(message)s',
            'datefmt': '%Y.%m.%d %H:%M:%S',
        }
    },
    'handlers': {
        'console_dev': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_true'],
        },
        'console_prod': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_false'],
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'django.log',
            'maxBytes': 1048576,
            'backupCount': 10,
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console_dev', 'console_prod'],
        },
        'django.server': {
            'handlers': ['console_dev', 'console_prod'],
            'level': LOGLEVEL,
            'propagate': True
        },
        'integration': {
            'handlers': ['console_dev', 'console_prod'],
            'level': LOGLEVEL,
            'propagate': True
        }
    }
}

SIMPLE_SEARCH_ENGINE = {
    'name': 'simple',
    'EXT_NAME': r".json",
    'DB_FILE_NAME': r"db.sqlite3"
}

SPHINX_SEARCH_ENGINE = {
    'name': 'sphinx',
    'HOST': '127.0.0.1',
    'PORT': 33959,
    'params': {
        'type': 'pgsql',
        'path': 'sdata',
        'mem_limit': 2147483647,
        'log': 'sdata/searchd.log',
        'query_log': 'sdata/query.log',
        'pid_file': 'sdata/searchd.pid',
        'binlog_path': 'sdata/ext',
        'read_timeout': 5,
        'client_timeout': 300,
        'max_children': 30,
        'persistent_connections_limit': 30,
        'seamless_rotate': 1,
        'preopen_indexes': 1,
        'unlink_old': 1,
        'mva_updates_pool': '1M',
        'max_packet_size': '8M',
        'max_filters': 256,
        'max_batch_queries': 32,
        'lemmatizer_base': 'sdata/dicts',
    }
}

SOLR_SEARCH_ENGINE = {
    'name': 'solr',
    'URL': "http://localhost:8983/solr"
}

WHOOSH_SEARCH_ENGINE = {
    'name': 'whoosh',
    'indexdir': "whoosh_index"
}

SEARCH_ENGINE = SPHINX_SEARCH_ENGINE
